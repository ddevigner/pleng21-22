/* Generated By:JavaCC: Do not edit this line. adac_4Constants.java */
package traductor;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface adac_4Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LETTER = 6;
  /** RegularExpression Id. */
  int DIGIT = 7;
  /** RegularExpression Id. */
  int COMMENT = 8;
  /** RegularExpression Id. */
  int SCOLON = 9;
  /** RegularExpression Id. */
  int COLON = 10;
  /** RegularExpression Id. */
  int LPAREN = 11;
  /** RegularExpression Id. */
  int RPAREN = 12;
  /** RegularExpression Id. */
  int LBRACK = 13;
  /** RegularExpression Id. */
  int RBRACK = 14;
  /** RegularExpression Id. */
  int INT = 15;
  /** RegularExpression Id. */
  int BOOL = 16;
  /** RegularExpression Id. */
  int CHAR = 17;
  /** RegularExpression Id. */
  int INTVAL = 18;
  /** RegularExpression Id. */
  int CHARVAL = 19;
  /** RegularExpression Id. */
  int BOOLVAL = 20;
  /** RegularExpression Id. */
  int STRING = 21;
  /** RegularExpression Id. */
  int ASS = 22;
  /** RegularExpression Id. */
  int ADD = 23;
  /** RegularExpression Id. */
  int SUB = 24;
  /** RegularExpression Id. */
  int MUL = 25;
  /** RegularExpression Id. */
  int DIV = 26;
  /** RegularExpression Id. */
  int MOD = 27;
  /** RegularExpression Id. */
  int EQ = 28;
  /** RegularExpression Id. */
  int NE = 29;
  /** RegularExpression Id. */
  int LT = 30;
  /** RegularExpression Id. */
  int GT = 31;
  /** RegularExpression Id. */
  int LE = 32;
  /** RegularExpression Id. */
  int GE = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int FUNC = 37;
  /** RegularExpression Id. */
  int PROC = 38;
  /** RegularExpression Id. */
  int IS = 39;
  /** RegularExpression Id. */
  int VAL = 40;
  /** RegularExpression Id. */
  int REF = 41;
  /** RegularExpression Id. */
  int RETURN = 42;
  /** RegularExpression Id. */
  int PUT = 43;
  /** RegularExpression Id. */
  int PUTLINE = 44;
  /** RegularExpression Id. */
  int CHAR2INT = 45;
  /** RegularExpression Id. */
  int INT2CHAR = 46;
  /** RegularExpression Id. */
  int SKIPLINE = 47;
  /** RegularExpression Id. */
  int GET = 48;
  /** RegularExpression Id. */
  int IF = 49;
  /** RegularExpression Id. */
  int THEN = 50;
  /** RegularExpression Id. */
  int ELSE = 51;
  /** RegularExpression Id. */
  int WHILE = 52;
  /** RegularExpression Id. */
  int DO = 53;
  /** RegularExpression Id. */
  int BEGIN = 54;
  /** RegularExpression Id. */
  int END = 55;
  /** RegularExpression Id. */
  int ID = 56;
  /** RegularExpression Id. */
  int UNKNOWN = 57;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\r\\n\"",
    "<LETTER>",
    "<DIGIT>",
    "<COMMENT>",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"integer\"",
    "\"boolean\"",
    "\"character\"",
    "<INTVAL>",
    "<CHARVAL>",
    "<BOOLVAL>",
    "<STRING>",
    "\":=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"div\"",
    "\"mod\"",
    "\"=\"",
    "\"<>\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"function\"",
    "\"procedure\"",
    "\"is\"",
    "\"val\"",
    "\"ref\"",
    "\"return\"",
    "\"put\"",
    "\"put_line\"",
    "\"char2int\"",
    "\"int2char\"",
    "\"skip_line\"",
    "\"get\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"begin\"",
    "\"end\"",
    "<ID>",
    "<UNKNOWN>",
  };

}
